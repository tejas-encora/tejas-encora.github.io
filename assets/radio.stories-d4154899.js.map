{"version":3,"file":"radio.stories-d4154899.js","sources":["../../node_modules/@material/web/radio/internal/forced-colors-styles.css.js","../../node_modules/@material/web/radio/internal/single-selection-controller.js","../../node_modules/@material/web/radio/internal/radio.js","../../node_modules/@material/web/radio/internal/radio-styles.css.js","../../node_modules/@material/web/radio/radio.js","../../src/components/Radio/IORadioButton.vue"],"sourcesContent":["/**\n  * @license\n  * Copyright 2022 Google LLC\n  * SPDX-License-Identifier: Apache-2.0\n  */\nimport { css } from 'lit';\nexport const styles = css `@media(forced-colors: active){:host{--md-radio-disabled-selected-icon-color: GrayText;--md-radio-disabled-selected-icon-opacity: 1;--md-radio-disabled-unselected-icon-color: GrayText;--md-radio-disabled-unselected-icon-opacity: 1;--md-radio-selected-icon-color: CanvasText;--md-radio-selected-hover-icon-color: CanvasText;--md-radio-selected-focus-icon-color: CanvasText;--md-radio-selected-pressed-icon-color: CanvasText;--md-radio-icon-color: CanvasText;--md-radio-hover-icon-color: CanvasText;--md-radio-focus-icon-color: CanvasText;--md-radio-pressed-icon-color: CanvasText}}/*# sourceMappingURL=forced-colors-styles.css.map */\n`;\n//# sourceMappingURL=forced-colors-styles.css.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * A `ReactiveController` that provides root node-scoped single selection for\n * elements, similar to native `<input type=\"radio\">` selection.\n *\n * To use, elements should add the controller and call\n * `selectionController.handleCheckedChange()` in a getter/setter. This must\n * be synchronous to match native behavior.\n *\n * @example\n * const CHECKED = Symbol('checked');\n *\n * class MyToggle extends LitElement {\n *   get checked() { return this[CHECKED]; }\n *   set checked(checked: boolean) {\n *     const oldValue = this.checked;\n *     if (oldValue === checked) {\n *       return;\n *     }\n *\n *     this[CHECKED] = checked;\n *     this.selectionController.handleCheckedChange();\n *     this.requestUpdate('checked', oldValue);\n *   }\n *\n *   [CHECKED] = false;\n *\n *   private selectionController = new SingleSelectionController(this);\n *\n *   constructor() {\n *     super();\n *     this.addController(this.selectionController);\n *   }\n * }\n */\nexport class SingleSelectionController {\n    constructor(host) {\n        this.host = host;\n        this.focused = false;\n        this.root = null;\n        this.handleFocusIn = () => {\n            this.focused = true;\n            this.updateTabIndices();\n        };\n        this.handleFocusOut = () => {\n            this.focused = false;\n            this.updateTabIndices();\n        };\n        /**\n         * Handles arrow key events from the host. Using the arrow keys will\n         * select and check the next or previous sibling with the host's\n         * `name` attribute.\n         */\n        this.handleKeyDown = (event) => {\n            const isDown = event.key === 'ArrowDown';\n            const isUp = event.key === 'ArrowUp';\n            const isLeft = event.key === 'ArrowLeft';\n            const isRight = event.key === 'ArrowRight';\n            // Ignore non-arrow keys\n            if (!isLeft && !isRight && !isDown && !isUp) {\n                return;\n            }\n            // Don't try to select another sibling if there aren't any.\n            const siblings = this.getNamedSiblings();\n            if (!siblings.length) {\n                return;\n            }\n            // Prevent default interactions on the element for arrow keys,\n            // since this controller will introduce new behavior.\n            event.preventDefault();\n            // Check if moving forwards or backwards\n            const isRtl = getComputedStyle(this.host).direction === 'rtl';\n            const forwards = isRtl ? isLeft || isDown : isRight || isDown;\n            const hostIndex = siblings.indexOf(this.host);\n            let nextIndex = forwards ? hostIndex + 1 : hostIndex - 1;\n            // Search for the next sibling that is not disabled to select.\n            // If we return to the host index, there is nothing to select.\n            while (nextIndex !== hostIndex) {\n                if (nextIndex >= siblings.length) {\n                    // Return to start if moving past the last item.\n                    nextIndex = 0;\n                }\n                else if (nextIndex < 0) {\n                    // Go to end if moving before the first item.\n                    nextIndex = siblings.length - 1;\n                }\n                // Check if the next sibling is disabled. If so,\n                // move the index and continue searching.\n                const nextSibling = siblings[nextIndex];\n                if (nextSibling.hasAttribute('disabled')) {\n                    if (forwards) {\n                        nextIndex++;\n                    }\n                    else {\n                        nextIndex--;\n                    }\n                    continue;\n                }\n                // Uncheck and remove focusability from other siblings.\n                for (const sibling of siblings) {\n                    if (sibling !== nextSibling) {\n                        sibling.checked = false;\n                        sibling.tabIndex = -1;\n                        sibling.blur();\n                    }\n                }\n                // The next sibling should be checked, focused and dispatch a change event\n                nextSibling.checked = true;\n                nextSibling.tabIndex = 0;\n                nextSibling.focus();\n                // Fire a change event since the change is triggered by a user action.\n                // This matches native <input type=\"radio\"> behavior.\n                nextSibling.dispatchEvent(new Event('change', { bubbles: true }));\n                break;\n            }\n        };\n    }\n    hostConnected() {\n        this.root = this.host.getRootNode();\n        this.host.addEventListener('keydown', this.handleKeyDown);\n        this.host.addEventListener('focusin', this.handleFocusIn);\n        this.host.addEventListener('focusout', this.handleFocusOut);\n        if (this.host.checked) {\n            // Uncheck other siblings when attached if already checked. This mimics\n            // native <input type=\"radio\"> behavior.\n            this.uncheckSiblings();\n        }\n        // Update for the newly added host.\n        this.updateTabIndices();\n    }\n    hostDisconnected() {\n        this.host.removeEventListener('keydown', this.handleKeyDown);\n        this.host.removeEventListener('focusin', this.handleFocusIn);\n        this.host.removeEventListener('focusout', this.handleFocusOut);\n        // Update for siblings that are still connected.\n        this.updateTabIndices();\n        this.root = null;\n    }\n    /**\n     * Should be called whenever the host's `checked` property changes\n     * synchronously.\n     */\n    handleCheckedChange() {\n        if (!this.host.checked) {\n            return;\n        }\n        this.uncheckSiblings();\n        this.updateTabIndices();\n    }\n    uncheckSiblings() {\n        for (const sibling of this.getNamedSiblings()) {\n            if (sibling !== this.host) {\n                sibling.checked = false;\n            }\n        }\n    }\n    /**\n     * Updates the `tabindex` of the host and its siblings.\n     */\n    updateTabIndices() {\n        // There are three tabindex states for a group of elements:\n        // 1. If any are checked, that element is focusable.\n        const siblings = this.getNamedSiblings();\n        const checkedSibling = siblings.find(sibling => sibling.checked);\n        // 2. If an element is focused, the others are no longer focusable.\n        if (checkedSibling || this.focused) {\n            const focusable = checkedSibling || this.host;\n            focusable.tabIndex = 0;\n            for (const sibling of siblings) {\n                if (sibling !== focusable) {\n                    sibling.tabIndex = -1;\n                }\n            }\n            return;\n        }\n        // 3. If none are checked or focused, all are focusable.\n        for (const sibling of siblings) {\n            sibling.tabIndex = 0;\n        }\n    }\n    /**\n     * Retrieves all siblings in the host element's root with the same `name`\n     * attribute.\n     */\n    getNamedSiblings() {\n        const name = this.host.getAttribute('name');\n        if (!name || !this.root) {\n            return [];\n        }\n        return Array.from(this.root.querySelectorAll(`[name=\"${name}\"]`));\n    }\n}\n//# sourceMappingURL=single-selection-controller.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nvar _a;\nimport { __decorate } from \"tslib\";\nimport '../../focus/md-focus-ring.js';\nimport '../../ripple/ripple.js';\nimport { html, isServer, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { polyfillElementInternalsAria, setupHostAria } from '../../internal/aria/aria.js';\nimport { isActivationClick } from '../../internal/controller/events.js';\nimport { SingleSelectionController } from './single-selection-controller.js';\nconst CHECKED = Symbol('checked');\nlet maskId = 0;\n/**\n * A radio component.\n */\nexport class Radio extends LitElement {\n    /**\n     * Whether or not the radio is selected.\n     */\n    get checked() {\n        return this[CHECKED];\n    }\n    set checked(checked) {\n        const wasChecked = this.checked;\n        if (wasChecked === checked) {\n            return;\n        }\n        this[CHECKED] = checked;\n        const state = String(checked);\n        this.internals.setFormValue(this.checked ? this.value : null, state);\n        this.requestUpdate('checked', wasChecked);\n        this.selectionController.handleCheckedChange();\n    }\n    /**\n     * The HTML name to use in form submission.\n     */\n    get name() {\n        return this.getAttribute('name') ?? '';\n    }\n    set name(name) {\n        this.setAttribute('name', name);\n    }\n    /**\n     * The associated form element with which this element's value will submit.\n     */\n    get form() {\n        return this.internals.form;\n    }\n    /**\n     * The labels this element is associated with.\n     */\n    get labels() {\n        return this.internals.labels;\n    }\n    constructor() {\n        super();\n        // Unique maskId is required because of a Safari bug that fail to persist\n        // reference to the mask. This should be removed once the bug is fixed.\n        this.maskId = `cutout${++maskId}`;\n        this[_a] = false;\n        /**\n         * Whether or not the radio is disabled.\n         */\n        this.disabled = false;\n        /**\n         * The element value to use in form submission when checked.\n         */\n        this.value = 'on';\n        this.selectionController = new SingleSelectionController(this);\n        this.internals = polyfillElementInternalsAria(this, this /* needed for closure */.attachInternals());\n        this.addController(this.selectionController);\n        if (!isServer) {\n            this.internals.role = 'radio';\n            this.addEventListener('click', this.handleClick.bind(this));\n            this.addEventListener('keydown', this.handleKeydown.bind(this));\n        }\n    }\n    render() {\n        const classes = { checked: this.checked };\n        return html `\n      <div class=\"container ${classMap(classes)}\" aria-hidden=\"true\">\n        <md-ripple part=\"ripple\" .control=${this}\n            ?disabled=${this.disabled}></md-ripple>\n        <md-focus-ring part=\"focus-ring\" .control=${this}></md-focus-ring>\n        <svg class=\"icon\" viewBox=\"0 0 20 20\">\n          <mask id=\"${this.maskId}\">\n            <rect width=\"100%\" height=\"100%\" fill=\"white\" />\n            <circle cx=\"10\" cy=\"10\" r=\"8\" fill=\"black\" />\n          </mask>\n          <circle class=\"outer circle\" cx=\"10\" cy=\"10\" r=\"10\"\n              mask=\"url(#${this.maskId})\" />\n          <circle class=\"inner circle\" cx=\"10\" cy=\"10\" r=\"5\" />\n        </svg>\n\n        <input\n          id=\"input\"\n          type=\"radio\"\n          tabindex=\"-1\"\n          .checked=${this.checked}\n          .value=${this.value}\n          ?disabled=${this.disabled}\n        >\n      </div>\n    `;\n    }\n    updated() {\n        this.internals.ariaChecked = String(this.checked);\n    }\n    async handleClick(event) {\n        if (this.disabled) {\n            return;\n        }\n        // allow event to propagate to user code after a microtask.\n        await 0;\n        if (event.defaultPrevented) {\n            return;\n        }\n        if (isActivationClick(event)) {\n            this.focus();\n        }\n        // Per spec, clicking on a radio input always selects it.\n        this.checked = true;\n        this.dispatchEvent(new Event('change', { bubbles: true }));\n        this.dispatchEvent(new InputEvent('input', { bubbles: true, composed: true }));\n    }\n    async handleKeydown(event) {\n        // allow event to propagate to user code after a microtask.\n        await 0;\n        if (event.key !== ' ' || event.defaultPrevented) {\n            return;\n        }\n        this.click();\n    }\n    /** @private */\n    formResetCallback() {\n        // The checked property does not reflect, so the original attribute set by\n        // the user is used to determine the default value.\n        this.checked = this.hasAttribute('checked');\n    }\n    /** @private */\n    formStateRestoreCallback(state) {\n        this.checked = state === 'true';\n    }\n}\n_a = CHECKED;\n(() => {\n    setupHostAria(Radio);\n})();\n/** @nocollapse */\nRadio.formAssociated = true;\n__decorate([\n    property({ type: Boolean })\n], Radio.prototype, \"checked\", null);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Radio.prototype, \"disabled\", void 0);\n__decorate([\n    property()\n], Radio.prototype, \"value\", void 0);\n//# sourceMappingURL=radio.js.map","/**\n  * @license\n  * Copyright 2022 Google LLC\n  * SPDX-License-Identifier: Apache-2.0\n  */\nimport { css } from 'lit';\nexport const styles = css `:host{--_disabled-selected-icon-color: var(--md-radio-disabled-selected-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-selected-icon-opacity: var(--md-radio-disabled-selected-icon-opacity, 0.38);--_disabled-unselected-icon-color: var(--md-radio-disabled-unselected-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-unselected-icon-opacity: var(--md-radio-disabled-unselected-icon-opacity, 0.38);--_icon-size: var(--md-radio-icon-size, 20px);--_selected-focus-icon-color: var(--md-radio-selected-focus-icon-color, var(--md-sys-color-primary, #6750a4));--_selected-hover-icon-color: var(--md-radio-selected-hover-icon-color, var(--md-sys-color-primary, #6750a4));--_selected-hover-state-layer-color: var(--md-radio-selected-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));--_selected-hover-state-layer-opacity: var(--md-radio-selected-hover-state-layer-opacity, 0.08);--_selected-icon-color: var(--md-radio-selected-icon-color, var(--md-sys-color-primary, #6750a4));--_selected-pressed-icon-color: var(--md-radio-selected-pressed-icon-color, var(--md-sys-color-primary, #6750a4));--_selected-pressed-state-layer-color: var(--md-radio-selected-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--_selected-pressed-state-layer-opacity: var(--md-radio-selected-pressed-state-layer-opacity, 0.12);--_state-layer-size: var(--md-radio-state-layer-size, 40px);--_focus-icon-color: var(--md-radio-focus-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-icon-color: var(--md-radio-hover-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-state-layer-color: var(--md-radio-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-state-layer-opacity: var(--md-radio-hover-state-layer-opacity, 0.08);--_icon-color: var(--md-radio-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_pressed-icon-color: var(--md-radio-pressed-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_pressed-state-layer-color: var(--md-radio-pressed-state-layer-color, var(--md-sys-color-primary, #6750a4));--_pressed-state-layer-opacity: var(--md-radio-pressed-state-layer-opacity, 0.12);--md-ripple-hover-color: var(--_hover-state-layer-color);--md-ripple-hover-opacity: var(--_hover-state-layer-opacity);--md-ripple-pressed-color: var(--_pressed-state-layer-color);--md-ripple-pressed-opacity: var(--_pressed-state-layer-opacity);display:inline-flex;height:var(--_icon-size);outline:none;position:relative;vertical-align:top;width:var(--_icon-size);-webkit-tap-highlight-color:rgba(0,0,0,0)}:host([touch-target=wrapper]){margin:max(0px,(48px - var(--_icon-size))/2)}.container{display:flex;height:100%;place-content:center;place-items:center;width:100%}md-focus-ring{height:44px;inset:unset;width:44px}.checked{--md-ripple-hover-color: var(--_selected-hover-state-layer-color);--md-ripple-hover-opacity: var(--_selected-hover-state-layer-opacity);--md-ripple-pressed-color: var(--_selected-pressed-state-layer-color);--md-ripple-pressed-opacity: var(--_selected-pressed-state-layer-opacity)}input{appearance:none;height:48px;margin:0;position:absolute;width:48px}:host([touch-target=none]) input{width:100%;height:100%}md-ripple{border-radius:50%;height:var(--_state-layer-size);inset:unset;width:var(--_state-layer-size)}.icon{fill:var(--_icon-color);inset:0;position:absolute}.outer.circle{transition:fill 50ms linear}.inner.circle{opacity:0;transform-origin:center;transition:opacity 50ms linear}.checked .icon{fill:var(--_selected-icon-color)}.checked .inner.circle{animation:inner-circle-grow 300ms cubic-bezier(0.05, 0.7, 0.1, 1);opacity:1}@keyframes inner-circle-grow{from{transform:scale(0)}to{transform:scale(1)}}:host([disabled]) .circle{animation-duration:0s;transition-duration:0s}:host(:hover) .icon{fill:var(--_hover-icon-color)}:host(:focus-within) .icon{fill:var(--_focus-icon-color)}:host(:active) .icon{fill:var(--_pressed-icon-color)}:host([disabled]) .icon{fill:var(--_disabled-unselected-icon-color);opacity:var(--_disabled-unselected-icon-opacity)}:host(:hover) .checked .icon{fill:var(--_selected-hover-icon-color)}:host(:focus-within) .checked .icon{fill:var(--_selected-focus-icon-color)}:host(:active) .checked .icon{fill:var(--_selected-pressed-icon-color)}:host([disabled]) .checked .icon{fill:var(--_disabled-selected-icon-color);opacity:var(--_disabled-selected-icon-opacity)}/*# sourceMappingURL=radio-styles.css.map */\n`;\n//# sourceMappingURL=radio-styles.css.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport { customElement } from 'lit/decorators.js';\nimport { styles as forcedColorsStyles } from './internal/forced-colors-styles.css.js';\nimport { Radio } from './internal/radio.js';\nimport { styles } from './internal/radio-styles.css.js';\n/**\n * @summary Radio buttons allow users to select one option from a set.\n *\n * @description\n * Radio buttons are the recommended way to allow users to make a single\n * selection from a list of options.\n *\n * Only one radio button can be selected at a time.\n *\n * Use radio buttons to:\n * - Select a single option from a set\n * - Expose all available options\n *\n * @final\n * @suppress {visibility}\n */\nexport let MdRadio = class MdRadio extends Radio {\n};\nMdRadio.styles = [styles, forcedColorsStyles];\nMdRadio = __decorate([\n    customElement('md-radio')\n], MdRadio);\n//# sourceMappingURL=radio.js.map","<template>\n  <md-radio touch-target=\"wrapper\" :value=\"modelValue\" @input=\"$emit('update:modelValue', $event.target.value)\"\n     ></md-radio>\n</template>\n\n<script>\nexport default {\n  name: 'IORadioButton', \n  emits: ['update:modelValue'],\n};\n</script>\n"],"names":["styles","css","SingleSelectionController","host","event","isDown","isUp","isLeft","isRight","siblings","forwards","hostIndex","nextIndex","nextSibling","sibling","checkedSibling","focusable","name","_a","CHECKED","maskId","LitElement","checked","wasChecked","state","polyfillElementInternalsAria","classes","html","classMap","isActivationClick","setupHostAria","Radio","__decorate","property","MdRadio","forcedColorsStyles","customElement","_sfc_main","_createBlock","_component_md_radio","_ctx","$event"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}