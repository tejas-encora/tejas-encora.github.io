{"version":3,"file":"form-submitter-786f4ae6.js","sources":["../../node_modules/@material/web/internal/controller/element-internals.js","../../node_modules/@material/web/internal/controller/form-submitter.js"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * A unique symbol used for protected access to an instance's\n * `ElementInternals`.\n *\n * @example\n * ```ts\n * class MyElement extends LitElement {\n *   static formAssociated = true;\n *\n *   [internals] = this.attachInternals();\n * }\n *\n * function getForm(element: MyElement) {\n *   return element[internals].form;\n * }\n * ```\n */\nexport const internals = Symbol('internals');\n//# sourceMappingURL=element-internals.js.map","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { isServer } from 'lit';\nimport { internals } from './element-internals.js';\n/**\n * Sets up an element's constructor to enable form submission. The element\n * instance should be form associated and have a `type` property.\n *\n * A click listener is added to each element instance. If the click is not\n * default prevented, it will submit the element's form, if any.\n *\n * @example\n * ```ts\n * class MyElement extends LitElement {\n *   static {\n *     setupFormSubmitter(MyElement);\n *   }\n *\n *   static formAssociated = true;\n *\n *   type: FormSubmitterType = 'submit';\n *\n *   [internals] = this.attachInternals();\n * }\n * ```\n *\n * @param ctor The form submitter element's constructor.\n */\nexport function setupFormSubmitter(ctor) {\n    if (isServer) {\n        return;\n    }\n    ctor.addInitializer(instance => {\n        const submitter = instance;\n        submitter.addEventListener('click', async (event) => {\n            const { type, [internals]: elementInternals } = submitter;\n            const { form } = elementInternals;\n            if (!form || type === 'button') {\n                return;\n            }\n            // Wait a microtask for event bubbling to complete.\n            await new Promise(resolve => {\n                resolve();\n            });\n            if (event.defaultPrevented) {\n                return;\n            }\n            if (type === 'reset') {\n                form.reset();\n                return;\n            }\n            // form.requestSubmit(submitter) does not work with form associated custom\n            // elements. This patches the dispatched submit event to add the correct\n            // `submitter`.\n            // See https://github.com/WICG/webcomponents/issues/814\n            form.addEventListener('submit', submitEvent => {\n                Object.defineProperty(submitEvent, 'submitter', {\n                    configurable: true,\n                    enumerable: true,\n                    get: () => submitter,\n                });\n            }, { capture: true, once: true });\n            elementInternals.setFormValue(submitter.value);\n            form.requestSubmit();\n        });\n    });\n}\n//# sourceMappingURL=form-submitter.js.map"],"names":["internals","setupFormSubmitter","ctor","instance","submitter","event","type","elementInternals","form","resolve","submitEvent"],"mappings":"gCAAA;AAAA;AAAA;AAAA;AAAA,GAsBY,MAACA,EAAY,OAAO,WAAW,ECtB3C;AAAA;AAAA;AAAA;AAAA,GA+BO,SAASC,EAAmBC,EAAM,CAIrCA,EAAK,eAAeC,GAAY,CAC5B,MAAMC,EAAYD,EAClBC,EAAU,iBAAiB,QAAS,MAAOC,GAAU,CACjD,KAAM,CAAE,KAAAC,EAAM,CAACN,CAAS,EAAGO,CAAgB,EAAKH,EAC1C,CAAE,KAAAI,CAAM,EAAGD,EACjB,GAAI,GAACC,GAAQF,IAAS,YAItB,MAAM,IAAI,QAAQG,GAAW,CACzBA,GAChB,CAAa,EACG,CAAAJ,EAAM,kBAGV,IAAIC,IAAS,QAAS,CAClBE,EAAK,MAAK,EACV,MACH,CAKDA,EAAK,iBAAiB,SAAUE,GAAe,CAC3C,OAAO,eAAeA,EAAa,YAAa,CAC5C,aAAc,GACd,WAAY,GACZ,IAAK,IAAMN,CAC/B,CAAiB,CACJ,EAAE,CAAE,QAAS,GAAM,KAAM,EAAM,CAAA,EAChCG,EAAiB,aAAaH,EAAU,KAAK,EAC7CI,EAAK,cAAa,EAC9B,CAAS,CACT,CAAK,CACL","x_google_ignoreList":[0,1]}