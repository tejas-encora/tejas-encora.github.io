{"version":3,"file":"ripple-82f18c17.js","sources":["../../node_modules/@material/web/internal/controller/attachable-controller.js","../../node_modules/@material/web/focus/internal/focus-ring.js","../../node_modules/@material/web/focus/internal/focus-ring-styles.css.js","../../node_modules/@material/web/focus/md-focus-ring.js","../../node_modules/@material/web/ripple/internal/ripple.js","../../node_modules/@material/web/ripple/internal/ripple-styles.css.js","../../node_modules/@material/web/ripple/ripple.js"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { isServer } from 'lit';\n/**\n * A key to retrieve an `Attachable` element's `AttachableController` from a\n * global `MutationObserver`.\n */\nconst ATTACHABLE_CONTROLLER = Symbol('attachableController');\nlet FOR_ATTRIBUTE_OBSERVER;\nif (!isServer) {\n    /**\n     * A global `MutationObserver` that reacts to `for` attribute changes on\n     * `Attachable` elements. If the `for` attribute changes, the controller will\n     * re-attach to the new referenced element.\n     */\n    FOR_ATTRIBUTE_OBSERVER = new MutationObserver(records => {\n        for (const record of records) {\n            // When a control's `for` attribute changes, inform its\n            // `AttachableController` to update to a new control.\n            record.target[ATTACHABLE_CONTROLLER]\n                ?.hostConnected();\n        }\n    });\n}\n/**\n * A controller that provides an implementation for `Attachable` elements.\n *\n * @example\n * ```ts\n * class MyElement extends LitElement implements Attachable {\n *   get control() { return this.attachableController.control; }\n *\n *   private readonly attachableController = new AttachableController(\n *     this,\n *     (previousControl, newControl) => {\n *       previousControl?.removeEventListener('click', this.handleClick);\n *       newControl?.addEventListener('click', this.handleClick);\n *     }\n *   );\n *\n *   // Implement remaining `Attachable` properties/methods that call the\n *   // controller's properties/methods.\n * }\n * ```\n */\nexport class AttachableController {\n    get htmlFor() {\n        return this.host.getAttribute('for');\n    }\n    set htmlFor(htmlFor) {\n        if (htmlFor === null) {\n            this.host.removeAttribute('for');\n        }\n        else {\n            this.host.setAttribute('for', htmlFor);\n        }\n    }\n    get control() {\n        if (this.host.hasAttribute('for')) {\n            if (!this.htmlFor || !this.host.isConnected) {\n                return null;\n            }\n            return this.host.getRootNode()\n                .querySelector(`#${this.htmlFor}`);\n        }\n        return this.currentControl || this.host.parentElement;\n    }\n    set control(control) {\n        if (control) {\n            this.attach(control);\n        }\n        else {\n            this.detach();\n        }\n    }\n    /**\n     * Creates a new controller for an `Attachable` element.\n     *\n     * @param host The `Attachable` element.\n     * @param onControlChange A callback with two parameters for the previous and\n     *     next control. An `Attachable` element may perform setup or teardown\n     *     logic whenever the control changes.\n     */\n    constructor(host, onControlChange) {\n        this.host = host;\n        this.onControlChange = onControlChange;\n        this.currentControl = null;\n        host.addController(this);\n        host[ATTACHABLE_CONTROLLER] = this;\n        FOR_ATTRIBUTE_OBSERVER?.observe(host, { attributeFilter: ['for'] });\n    }\n    attach(control) {\n        if (control === this.currentControl) {\n            return;\n        }\n        this.setCurrentControl(control);\n        // When imperatively attaching, remove the `for` attribute so\n        // that the attached control is used instead of a referenced one.\n        this.host.removeAttribute('for');\n    }\n    detach() {\n        this.setCurrentControl(null);\n        // When imperatively detaching, add an empty `for=\"\"` attribute. This will\n        // ensure the control is `null` rather than the `parentElement`.\n        this.host.setAttribute('for', '');\n    }\n    /** @private */\n    hostConnected() {\n        this.setCurrentControl(this.control);\n    }\n    /** @private */\n    hostDisconnected() {\n        this.setCurrentControl(null);\n    }\n    setCurrentControl(control) {\n        this.onControlChange(this.currentControl, control);\n        this.currentControl = control;\n    }\n}\n//# sourceMappingURL=attachable-controller.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport { isServer, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { AttachableController } from '../../internal/controller/attachable-controller.js';\n/**\n * Events that the focus ring listens to.\n *\n * @fires visibility-changed Fired whenever `visible` changes.\n */\nconst EVENTS = ['focusin', 'focusout', 'pointerdown'];\n/**\n * A focus ring component.\n */\nexport class FocusRing extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Makes the focus ring visible.\n         */\n        this.visible = false;\n        /**\n         * Makes the focus ring animate inwards instead of outwards.\n         */\n        this.inward = false;\n        this.attachableController = new AttachableController(this, this.onControlChange.bind(this));\n    }\n    get htmlFor() {\n        return this.attachableController.htmlFor;\n    }\n    set htmlFor(htmlFor) {\n        this.attachableController.htmlFor = htmlFor;\n    }\n    get control() {\n        return this.attachableController.control;\n    }\n    set control(control) {\n        this.attachableController.control = control;\n    }\n    attach(control) {\n        this.attachableController.attach(control);\n    }\n    detach() {\n        this.attachableController.detach();\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Needed for VoiceOver, which will create a \"group\" if the element is a\n        // sibling to other content.\n        this.setAttribute('aria-hidden', 'true');\n    }\n    /** @private */\n    handleEvent(event) {\n        if (event[HANDLED_BY_FOCUS_RING]) {\n            // This ensures the focus ring does not activate when multiple focus rings\n            // are used within a single component.\n            return;\n        }\n        switch (event.type) {\n            default:\n                return;\n            case 'focusin':\n                this.visible = this.control?.matches(':focus-visible') ?? false;\n                break;\n            case 'focusout':\n            case 'pointerdown':\n                this.visible = false;\n                break;\n        }\n        event[HANDLED_BY_FOCUS_RING] = true;\n    }\n    onControlChange(prev, next) {\n        if (isServer)\n            return;\n        for (const event of EVENTS) {\n            prev?.removeEventListener(event, this);\n            next?.addEventListener(event, this);\n        }\n    }\n    update(changed) {\n        if (changed.has('visible')) {\n            // This logic can be removed once the `:has` selector has been introduced\n            // to Firefox. This is necessary to allow correct submenu styles.\n            this.dispatchEvent(new Event('visibility-changed'));\n        }\n        super.update(changed);\n    }\n}\n__decorate([\n    property({ type: Boolean, reflect: true })\n], FocusRing.prototype, \"visible\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], FocusRing.prototype, \"inward\", void 0);\nconst HANDLED_BY_FOCUS_RING = Symbol('handledByFocusRing');\n//# sourceMappingURL=focus-ring.js.map","/**\n  * @license\n  * Copyright 2022 Google LLC\n  * SPDX-License-Identifier: Apache-2.0\n  */\nimport { css } from 'lit';\nexport const styles = css `:host{animation-delay:0s,calc(var(--md-focus-ring-duration, 600ms)*.25);animation-duration:calc(var(--md-focus-ring-duration, 600ms)*.25),calc(var(--md-focus-ring-duration, 600ms)*.75);animation-timing-function:cubic-bezier(0.2, 0, 0, 1);box-sizing:border-box;color:var(--md-focus-ring-color, var(--md-sys-color-secondary, #625b71));display:none;pointer-events:none;position:absolute}:host([visible]){display:flex}:host(:not([inward])){animation-name:outward-grow,outward-shrink;border-end-end-radius:calc(var(--md-focus-ring-shape-end-end, var(--md-focus-ring-shape, 9999px)) + var(--md-focus-ring-outward-offset, 2px));border-end-start-radius:calc(var(--md-focus-ring-shape-end-start, var(--md-focus-ring-shape, 9999px)) + var(--md-focus-ring-outward-offset, 2px));border-start-end-radius:calc(var(--md-focus-ring-shape-start-end, var(--md-focus-ring-shape, 9999px)) + var(--md-focus-ring-outward-offset, 2px));border-start-start-radius:calc(var(--md-focus-ring-shape-start-start, var(--md-focus-ring-shape, 9999px)) + var(--md-focus-ring-outward-offset, 2px));inset:calc(-1*var(--md-focus-ring-outward-offset, 2px));outline:var(--md-focus-ring-width, 3px) solid currentColor}:host([inward]){animation-name:inward-grow,inward-shrink;border-end-end-radius:calc(var(--md-focus-ring-shape-end-end, var(--md-focus-ring-shape, 9999px)) - var(--md-focus-ring-inward-offset, 0px));border-end-start-radius:calc(var(--md-focus-ring-shape-end-start, var(--md-focus-ring-shape, 9999px)) - var(--md-focus-ring-inward-offset, 0px));border-start-end-radius:calc(var(--md-focus-ring-shape-start-end, var(--md-focus-ring-shape, 9999px)) - var(--md-focus-ring-inward-offset, 0px));border-start-start-radius:calc(var(--md-focus-ring-shape-start-start, var(--md-focus-ring-shape, 9999px)) - var(--md-focus-ring-inward-offset, 0px));border:var(--md-focus-ring-width, 3px) solid currentColor;inset:var(--md-focus-ring-inward-offset, 0px)}@keyframes outward-grow{from{outline-width:0}to{outline-width:var(--md-focus-ring-active-width, 8px)}}@keyframes outward-shrink{from{outline-width:var(--md-focus-ring-active-width, 8px)}}@keyframes inward-grow{from{border-width:0}to{border-width:var(--md-focus-ring-active-width, 8px)}}@keyframes inward-shrink{from{border-width:var(--md-focus-ring-active-width, 8px)}}@media(prefers-reduced-motion){:host{animation:none}}/*# sourceMappingURL=focus-ring-styles.css.map */\n`;\n//# sourceMappingURL=focus-ring-styles.css.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport { customElement } from 'lit/decorators.js';\nimport { FocusRing } from './internal/focus-ring.js';\nimport { styles } from './internal/focus-ring-styles.css.js';\n/**\n * TODO(b/267336424): add docs\n *\n * @final\n * @suppress {visibility}\n */\nexport let MdFocusRing = class MdFocusRing extends FocusRing {\n};\nMdFocusRing.styles = [styles];\nMdFocusRing = __decorate([\n    customElement('md-focus-ring')\n], MdFocusRing);\n//# sourceMappingURL=md-focus-ring.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport { html, isServer, LitElement } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { AttachableController } from '../../internal/controller/attachable-controller.js';\nimport { EASING } from '../../internal/motion/animation.js';\nconst PRESS_GROW_MS = 450;\nconst MINIMUM_PRESS_MS = 225;\nconst INITIAL_ORIGIN_SCALE = 0.2;\nconst PADDING = 10;\nconst SOFT_EDGE_MINIMUM_SIZE = 75;\nconst SOFT_EDGE_CONTAINER_RATIO = 0.35;\nconst PRESS_PSEUDO = '::after';\nconst ANIMATION_FILL = 'forwards';\n/**\n * Interaction states for the ripple.\n *\n * On Touch:\n *  - `INACTIVE -> TOUCH_DELAY -> WAITING_FOR_CLICK -> INACTIVE`\n *  - `INACTIVE -> TOUCH_DELAY -> HOLDING -> WAITING_FOR_CLICK -> INACTIVE`\n *\n * On Mouse or Pen:\n *   - `INACTIVE -> WAITING_FOR_CLICK -> INACTIVE`\n */\nvar State;\n(function (State) {\n    /**\n     * Initial state of the control, no touch in progress.\n     *\n     * Transitions:\n     *   - on touch down: transition to `TOUCH_DELAY`.\n     *   - on mouse down: transition to `WAITING_FOR_CLICK`.\n     */\n    State[State[\"INACTIVE\"] = 0] = \"INACTIVE\";\n    /**\n     * Touch down has been received, waiting to determine if it's a swipe or\n     * scroll.\n     *\n     * Transitions:\n     *   - on touch up: begin press; transition to `WAITING_FOR_CLICK`.\n     *   - on cancel: transition to `INACTIVE`.\n     *   - after `TOUCH_DELAY_MS`: begin press; transition to `HOLDING`.\n     */\n    State[State[\"TOUCH_DELAY\"] = 1] = \"TOUCH_DELAY\";\n    /**\n     * A touch has been deemed to be a press\n     *\n     * Transitions:\n     *  - on up: transition to `WAITING_FOR_CLICK`.\n     */\n    State[State[\"HOLDING\"] = 2] = \"HOLDING\";\n    /**\n     * The user touch has finished, transition into rest state.\n     *\n     * Transitions:\n     *   - on click end press; transition to `INACTIVE`.\n     */\n    State[State[\"WAITING_FOR_CLICK\"] = 3] = \"WAITING_FOR_CLICK\";\n})(State || (State = {}));\n/**\n * Events that the ripple listens to.\n */\nconst EVENTS = [\n    'click', 'contextmenu', 'pointercancel', 'pointerdown', 'pointerenter',\n    'pointerleave', 'pointerup'\n];\n/**\n * Delay reacting to touch so that we do not show the ripple for a swipe or\n * scroll interaction.\n */\nconst TOUCH_DELAY_MS = 150;\n/**\n * A ripple component.\n */\nexport class Ripple extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Disables the ripple.\n         */\n        this.disabled = false;\n        this.hovered = false;\n        this.pressed = false;\n        this.rippleSize = '';\n        this.rippleScale = '';\n        this.initialSize = 0;\n        this.state = State.INACTIVE;\n        this.checkBoundsAfterContextMenu = false;\n        this.attachableController = new AttachableController(this, this.onControlChange.bind(this));\n    }\n    get htmlFor() {\n        return this.attachableController.htmlFor;\n    }\n    set htmlFor(htmlFor) {\n        this.attachableController.htmlFor = htmlFor;\n    }\n    get control() {\n        return this.attachableController.control;\n    }\n    set control(control) {\n        this.attachableController.control = control;\n    }\n    attach(control) {\n        this.attachableController.attach(control);\n    }\n    detach() {\n        this.attachableController.detach();\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Needed for VoiceOver, which will create a \"group\" if the element is a\n        // sibling to other content.\n        this.setAttribute('aria-hidden', 'true');\n    }\n    render() {\n        const classes = {\n            'hovered': this.hovered,\n            'pressed': this.pressed,\n        };\n        return html `<div class=\"surface ${classMap(classes)}\"></div>`;\n    }\n    update(changedProps) {\n        if (changedProps.has('disabled') && this.disabled) {\n            this.hovered = false;\n            this.pressed = false;\n        }\n        super.update(changedProps);\n    }\n    /**\n     * TODO(b/269799771): make private\n     * @private only public for slider\n     */\n    handlePointerenter(event) {\n        if (!this.shouldReactToEvent(event)) {\n            return;\n        }\n        this.hovered = true;\n    }\n    /**\n     * TODO(b/269799771): make private\n     * @private only public for slider\n     */\n    handlePointerleave(event) {\n        if (!this.shouldReactToEvent(event)) {\n            return;\n        }\n        this.hovered = false;\n        // release a held mouse or pen press that moves outside the element\n        if (this.state !== State.INACTIVE) {\n            this.endPressAnimation();\n        }\n    }\n    handlePointerup(event) {\n        if (!this.shouldReactToEvent(event)) {\n            return;\n        }\n        if (this.state === State.HOLDING) {\n            this.state = State.WAITING_FOR_CLICK;\n            return;\n        }\n        if (this.state === State.TOUCH_DELAY) {\n            this.state = State.WAITING_FOR_CLICK;\n            this.startPressAnimation(this.rippleStartEvent);\n            return;\n        }\n    }\n    async handlePointerdown(event) {\n        if (!this.shouldReactToEvent(event)) {\n            return;\n        }\n        this.rippleStartEvent = event;\n        if (!this.isTouch(event)) {\n            this.state = State.WAITING_FOR_CLICK;\n            this.startPressAnimation(event);\n            return;\n        }\n        // after a longpress contextmenu event, an extra `pointerdown` can be\n        // dispatched to the pressed element. Check that the down is within\n        // bounds of the element in this case.\n        if (this.checkBoundsAfterContextMenu && !this.inBounds(event)) {\n            return;\n        }\n        this.checkBoundsAfterContextMenu = false;\n        // Wait for a hold after touch delay\n        this.state = State.TOUCH_DELAY;\n        await new Promise(resolve => {\n            setTimeout(resolve, TOUCH_DELAY_MS);\n        });\n        if (this.state !== State.TOUCH_DELAY) {\n            return;\n        }\n        this.state = State.HOLDING;\n        this.startPressAnimation(event);\n    }\n    handleClick() {\n        // Click is a MouseEvent in Firefox and Safari, so we cannot use\n        // `shouldReactToEvent`\n        if (this.disabled) {\n            return;\n        }\n        if (this.state === State.WAITING_FOR_CLICK) {\n            this.endPressAnimation();\n            return;\n        }\n        if (this.state === State.INACTIVE) {\n            // keyboard synthesized click event\n            this.startPressAnimation();\n            this.endPressAnimation();\n        }\n    }\n    handlePointercancel(event) {\n        if (!this.shouldReactToEvent(event)) {\n            return;\n        }\n        this.endPressAnimation();\n    }\n    handleContextmenu() {\n        if (this.disabled) {\n            return;\n        }\n        this.checkBoundsAfterContextMenu = true;\n        this.endPressAnimation();\n    }\n    determineRippleSize() {\n        const { height, width } = this.getBoundingClientRect();\n        const maxDim = Math.max(height, width);\n        const softEdgeSize = Math.max(SOFT_EDGE_CONTAINER_RATIO * maxDim, SOFT_EDGE_MINIMUM_SIZE);\n        const initialSize = Math.floor(maxDim * INITIAL_ORIGIN_SCALE);\n        const hypotenuse = Math.sqrt(width ** 2 + height ** 2);\n        const maxRadius = hypotenuse + PADDING;\n        this.initialSize = initialSize;\n        this.rippleScale = `${(maxRadius + softEdgeSize) / initialSize}`;\n        this.rippleSize = `${initialSize}px`;\n    }\n    getNormalizedPointerEventCoords(pointerEvent) {\n        const { scrollX, scrollY } = window;\n        const { left, top } = this.getBoundingClientRect();\n        const documentX = scrollX + left;\n        const documentY = scrollY + top;\n        const { pageX, pageY } = pointerEvent;\n        return { x: pageX - documentX, y: pageY - documentY };\n    }\n    getTranslationCoordinates(positionEvent) {\n        const { height, width } = this.getBoundingClientRect();\n        // end in the center\n        const endPoint = {\n            x: (width - this.initialSize) / 2,\n            y: (height - this.initialSize) / 2,\n        };\n        let startPoint;\n        if (positionEvent instanceof PointerEvent) {\n            startPoint = this.getNormalizedPointerEventCoords(positionEvent);\n        }\n        else {\n            startPoint = {\n                x: width / 2,\n                y: height / 2,\n            };\n        }\n        // center around start point\n        startPoint = {\n            x: startPoint.x - (this.initialSize / 2),\n            y: startPoint.y - (this.initialSize / 2),\n        };\n        return { startPoint, endPoint };\n    }\n    startPressAnimation(positionEvent) {\n        if (!this.mdRoot) {\n            return;\n        }\n        this.pressed = true;\n        this.growAnimation?.cancel();\n        this.determineRippleSize();\n        const { startPoint, endPoint } = this.getTranslationCoordinates(positionEvent);\n        const translateStart = `${startPoint.x}px, ${startPoint.y}px`;\n        const translateEnd = `${endPoint.x}px, ${endPoint.y}px`;\n        this.growAnimation = this.mdRoot.animate({\n            top: [0, 0],\n            left: [0, 0],\n            height: [this.rippleSize, this.rippleSize],\n            width: [this.rippleSize, this.rippleSize],\n            transform: [\n                `translate(${translateStart}) scale(1)`,\n                `translate(${translateEnd}) scale(${this.rippleScale})`\n            ],\n        }, {\n            pseudoElement: PRESS_PSEUDO,\n            duration: PRESS_GROW_MS,\n            easing: EASING.STANDARD,\n            fill: ANIMATION_FILL\n        });\n    }\n    async endPressAnimation() {\n        this.state = State.INACTIVE;\n        const animation = this.growAnimation;\n        const pressAnimationPlayState = animation?.currentTime ?? Infinity;\n        // TODO: go/ts51upgrade - Auto-added to unblock TS5.1 migration.\n        //   TS2365: Operator '>=' cannot be applied to types 'CSSNumberish' and\n        //   'number'.\n        // @ts-ignore\n        if (pressAnimationPlayState >= MINIMUM_PRESS_MS) {\n            this.pressed = false;\n            return;\n        }\n        await new Promise(resolve => {\n            // TODO: go/ts51upgrade - Auto-added to unblock TS5.1 migration.\n            //   TS2363: The right-hand side of an arithmetic operation must be of\n            //   type 'any', 'number', 'bigint' or an enum type.\n            // @ts-ignore\n            setTimeout(resolve, MINIMUM_PRESS_MS - pressAnimationPlayState);\n        });\n        if (this.growAnimation !== animation) {\n            // A new press animation was started. The old animation was canceled and\n            // should not finish the pressed state.\n            return;\n        }\n        this.pressed = false;\n    }\n    /**\n     * Returns `true` if\n     *  - the ripple element is enabled\n     *  - the pointer is primary for the input type\n     *  - the pointer is the pointer that started the interaction, or will start\n     * the interaction\n     *  - the pointer is a touch, or the pointer state has the primary button\n     * held, or the pointer is hovering\n     */\n    shouldReactToEvent(event) {\n        if (this.disabled || !event.isPrimary) {\n            return false;\n        }\n        if (this.rippleStartEvent &&\n            this.rippleStartEvent.pointerId !== event.pointerId) {\n            return false;\n        }\n        if (event.type === 'pointerenter' || event.type === 'pointerleave') {\n            return !this.isTouch(event);\n        }\n        const isPrimaryButton = event.buttons === 1;\n        return this.isTouch(event) || isPrimaryButton;\n    }\n    /**\n     * Check if the event is within the bounds of the element.\n     *\n     * This is only needed for the \"stuck\" contextmenu longpress on Chrome.\n     */\n    inBounds({ x, y }) {\n        const { top, left, bottom, right } = this.getBoundingClientRect();\n        return x >= left && x <= right && y >= top && y <= bottom;\n    }\n    isTouch({ pointerType }) {\n        return pointerType === 'touch';\n    }\n    /** @private */\n    async handleEvent(event) {\n        switch (event.type) {\n            case 'click':\n                this.handleClick();\n                break;\n            case 'contextmenu':\n                this.handleContextmenu();\n                break;\n            case 'pointercancel':\n                this.handlePointercancel(event);\n                break;\n            case 'pointerdown':\n                await this.handlePointerdown(event);\n                break;\n            case 'pointerenter':\n                this.handlePointerenter(event);\n                break;\n            case 'pointerleave':\n                this.handlePointerleave(event);\n                break;\n            case 'pointerup':\n                this.handlePointerup(event);\n                break;\n            default:\n                break;\n        }\n    }\n    onControlChange(prev, next) {\n        if (isServer)\n            return;\n        for (const event of EVENTS) {\n            prev?.removeEventListener(event, this);\n            next?.addEventListener(event, this);\n        }\n    }\n}\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Ripple.prototype, \"disabled\", void 0);\n__decorate([\n    state()\n], Ripple.prototype, \"hovered\", void 0);\n__decorate([\n    state()\n], Ripple.prototype, \"pressed\", void 0);\n__decorate([\n    query('.surface')\n], Ripple.prototype, \"mdRoot\", void 0);\n//# sourceMappingURL=ripple.js.map","/**\n  * @license\n  * Copyright 2022 Google LLC\n  * SPDX-License-Identifier: Apache-2.0\n  */\nimport { css } from 'lit';\nexport const styles = css `:host{--_hover-color: var(--md-ripple-hover-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-opacity: var(--md-ripple-hover-opacity, 0.08);--_pressed-color: var(--md-ripple-pressed-color, var(--md-sys-color-on-surface, #1d1b20));--_pressed-opacity: var(--md-ripple-pressed-opacity, 0.12);display:flex;margin:auto;pointer-events:none}:host([disabled]){display:none}@media(forced-colors: active){:host{display:none}}:host,.surface{border-radius:inherit;position:absolute;inset:0;overflow:hidden}.surface{-webkit-tap-highlight-color:rgba(0,0,0,0)}.surface::before,.surface::after{content:\"\";opacity:0;position:absolute}.surface::before{background-color:var(--_hover-color);inset:0;transition:opacity 15ms linear,background-color 15ms linear}.surface::after{background:radial-gradient(closest-side, var(--_pressed-color) max(100% - 70px, 65%), transparent 100%);transform-origin:center center;transition:opacity 375ms linear}.hovered::before{background-color:var(--_hover-color);opacity:var(--_hover-opacity)}.pressed::after{opacity:var(--_pressed-opacity);transition-duration:105ms}/*# sourceMappingURL=ripple-styles.css.map */\n`;\n//# sourceMappingURL=ripple-styles.css.js.map","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport { customElement } from 'lit/decorators.js';\nimport { Ripple } from './internal/ripple.js';\nimport { styles } from './internal/ripple-styles.css.js';\n/**\n * @summary Ripples, also known as state layers, are visual indicators used to\n * communicate the status of a component or interactive element.\n *\n * @description A state layer is a semi-transparent covering on an element that\n * indicates its state. State layers provide a systematic approach to\n * visualizing states by using opacity. A layer can be applied to an entire\n * element or in a circular shape and only one state layer can be applied at a\n * given time.\n *\n * @final\n * @suppress {visibility}\n */\nexport let MdRipple = class MdRipple extends Ripple {\n};\nMdRipple.styles = [styles];\nMdRipple = __decorate([\n    customElement('md-ripple')\n], MdRipple);\n//# sourceMappingURL=ripple.js.map"],"names":["ATTACHABLE_CONTROLLER","FOR_ATTRIBUTE_OBSERVER","records","record","_a","AttachableController","htmlFor","control","host","onControlChange","EVENTS","FocusRing","LitElement","event","HANDLED_BY_FOCUS_RING","prev","next","changed","__decorate","property","styles","css","MdFocusRing","customElement","PRESS_GROW_MS","MINIMUM_PRESS_MS","INITIAL_ORIGIN_SCALE","PADDING","SOFT_EDGE_MINIMUM_SIZE","SOFT_EDGE_CONTAINER_RATIO","PRESS_PSEUDO","ANIMATION_FILL","State","TOUCH_DELAY_MS","Ripple","classes","html","classMap","changedProps","resolve","height","width","maxDim","softEdgeSize","initialSize","maxRadius","pointerEvent","scrollX","scrollY","left","top","documentX","documentY","pageX","pageY","positionEvent","endPoint","startPoint","translateStart","translateEnd","EASING","animation","pressAnimationPlayState","isPrimaryButton","x","y","bottom","right","pointerType","state","query","MdRipple"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}